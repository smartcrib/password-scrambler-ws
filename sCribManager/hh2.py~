#!/usr/bin/env python
"""helper.py: an example code for using command ENSCRAMBLE
    - project sCribManager - Python."""

'''
@author: Dan Cvrcek, George French
@copyright: Copyright 2013-14, Smart Crib Ltd
@credits: George French, Dan Cvrcek
@license: GPL version 3 (e.g., https://www.gnu.org/copyleft/gpl.html)
@version: 1.0
@email: info@s-crib.com
@status: Test
'''
from Crypto.Cipher import AES
import threading
import binascii
import time
import sys
import urllib2
#import sys


class Client(object):

    _BLOCK_SIZE = 16
    _READ_TIMEOUT = 2 # in seconds
    space = 1

    def _encrypt(self, message, passphrase):
        # passphrase MUST be 16, 24 or 32 bytes long, how can I do that ?
        IV =  "\x00" * self._BLOCK_SIZE
        while (len(passphrase)<32):
            passphrase = passphrase + "\x00"

        aes = AES.new(passphrase, AES.MODE_CBC, IV)
        return aes.encrypt(message)

    def _decrypt(self, encrypted, passphrase):
        IV = "\x00" * self._BLOCK_SIZE
        while (len(passphrase)<32):
            passphrase = passphrase + "\x00"
            
        aes = AES.new(passphrase, AES.MODE_CBC, IV)
        result = aes.decrypt(encrypted)
        padding = ord(result[len(result)-1])
        length = len(result)
        for index in range(length-padding,length):
            if (ord(result[index]) != padding):
                return ""
        padding = length - padding # get data bytes instead of padding length
        result = result[:padding]
        return result
        

    def SCRAMBLE(self,passphrase, serverCounter, password, saltLength=0, salt="", name=0):
        if not isinstance(saltLength, (int)):
            print("salt length must be an INT")
            return "ERR107"
        if saltLength<0 or saltLength > 16: 
            print("salt length must be between 0 and 16 not: %s" % saltLength)
            return "ERR106"
        if salt is None:
            salt = ""
        if (saltLength != len(salt)) and (len(salt)>0):
            print("salt is not of expected length" % saltLength)
            return "ERR105"

        # call the dongle
        if (len(salt)>0):
            url = 'http://scrambler.s-crib.com:4243/SCRAMBLE/george/'+password+'/'+str(saltLength)+'/'+salt;
        else:
            url = 'http://scrambler.s-crib.com:4243/SCRAMBLE/george/'+password+'/'+str(saltLength)
	page = urllib2.urlopen(url)
	response = page.read().strip().split()
	print str(name).zfill(2)+" "+response[0][:6]
        
def testThread(name):
    transportKey = 'UfN3_EAy)C4e5Y0C/?/z/yPyYi7n-TFq'
    counterSecret = str(int(time.time()*10))[1:]
    password = "passw0rd"
    saltLength = 10
    salt = None
    client = Client()  
    start = time.time()
    for i in range(50):
        url = 'http://scrambler.s-crib.com:4243/SCRAMBLE/george/'+password+'/'+str(saltLength)
	page = urllib2.urlopen(url)
        #result = client.SCRAMBLE(transportKey, counterSecret, password, saltLength, salt,name)
	response = page.read().strip().split()
	print str(name).zfill(2)+" "+response[0][:6]
        result =""
    end = time.time()
    print("Thread %d running time is : %f\n\n"%(name, end-start)) 

                
if __name__ == '__main__':

    threads = []
    for i in range(20):
        t = threading.Thread(target=testThread,args=(i,))
        t.daemon = True
        t.start()
        threads.append(t)
    for j in threads:
        j.join()
    pass
